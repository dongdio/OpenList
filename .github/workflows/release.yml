name: release

on:
  release:
    types: [ published ]

permissions: write-all

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ github.event.release.id }}
    steps:
      - name: Set release as prerelease during build
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ github.event.release.id }}
          prerelease: true

  build_main:
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo snap install zig --classic --beta
          docker pull crazymax/xgo:latest
          go install github.com/crazy-max/xgo@latest
          sudo apt install upx

      - name: Build main targets
        id: build_main
        run: |
          # 创建构建日志
          touch build_log.txt

          # 运行构建并捕获输出
          bash build.sh release | tee build_log.txt

          # 检查构建是否成功
          if [ $? -ne 0 ]; then
            echo "::error::Build script failed. See log for details."
            exit 1
          fi

          # 检查输出目录
          echo "=== Build output directories ==="
          find build -type d | sort

          # 检查压缩文件
          echo "=== Compress files ==="
          find build/compress -type f | sort

          # 检查压缩文件是否存在
          if [ ! -d "build/compress" ] || [ -z "$(ls -A build/compress 2>/dev/null)" ]; then
            echo "::warning::No files found in build/compress directory"
            # 尝试查找构建产物并移动
            mkdir -p build/compress
            find build -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} build/compress/ || true
          fi

          # 再次检查
          echo "=== Final compress files ==="
          find build/compress -type f | sort
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: build/compress/*
          prerelease: false
          fail_on_unmatched_files: false

      - name: Upload build logs as artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build_log.txt
            build/
          retention-days: 7

  # TODO: We do not have desktop clients right now. We may need a better way to
  # trigger the build of desktop client when we actually have it.
  # release_desktop:
  #   needs: release
  #   name: Release desktop
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  #       with:
  #         repository: openlistteam/desktop-release
  #         ref: main
  #         persist-credentials: false
  #         fetch-depth: 0

  #     - name: Add tag
  #       run: |
  #         git config --local user.email "bot@nn.ci"
  #         git config --local user.name "IlaBot"
  #         version=$(wget -qO- -t1 -T2 "https://api.github.com/repos/openlistteam/openlist/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
  #         git tag -a $version -m "release $version"

  #     - name: Push tags
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.MY_TOKEN }}
  #         branch: main
  #         repository: openlistteam/desktop-release