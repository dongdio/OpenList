name: Release builds

on:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  prepare_release:
    name: Set Prerelease
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ github.event.release.id }}
    steps:
      - name: Set release as prerelease during build
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ github.event.release.id }}
          prerelease: true

  build_main:
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo snap install zig --classic --beta
          docker pull crazymax/xgo:latest
          go install github.com/crazy-max/xgo@latest
          sudo apt install upx

      - name: Build main targets
        id: build_main
        run: |
          # 创建构建日志
          touch build_log.txt

          # 运行构建并捕获输出
          bash build.sh release | tee build_log.txt

          # 检查构建是否成功
          if [ $? -ne 0 ]; then
            echo "::error::Build script failed. See log for details."
            exit 1
          fi

          # 检查输出目录
          echo "=== Build output directories ==="
          find build -type d | sort

          # 检查压缩文件
          echo "=== Compress files ==="
          find build/compress -type f | sort

          # 检查压缩文件是否存在
          if [ ! -d "build/compress" ] || [ -z "$(ls -A build/compress 2>/dev/null)" ]; then
            echo "::warning::No files found in build/compress directory"
            # 尝试查找构建产物并移动
            mkdir -p build/compress
            find build -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} build/compress/ || true
          fi

          # 再次检查
          echo "=== Final compress files ==="
          find build/compress -type f | sort
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: build/compress/*
          prerelease: false

  release-lite:
    strategy:
      matrix:
        build-type: [ 'standard', 'lite' ]
        target-platform: [ '', 'android', 'freebsd', 'linux_musl', 'linux_musl_arm' ]
        go-version: [ '1.24.5' ]
    name: Release ${{ matrix.target-platform && format('{0} ', matrix.target-platform) || '' }}${{ matrix.build-type == 'lite' && 'Lite' || '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        if: matrix.target-platform == ''
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        if: matrix.target-platform == ''
        run: |
          sudo snap install zig --classic --beta
          docker pull crazymax/xgo:latest
          go install github.com/crazy-max/xgo@latest
          sudo apt install upx

      - name: Build
        run: |
          bash build.sh release ${{ matrix.build-type == 'lite' && 'lite' || '' }} ${{ matrix.target-platform }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: build/compress/*
          prerelease: false